// Qu·∫£n l√Ω tr·∫°ng th√°i t·∫≠p trung
let gameState = {
    players: [],
    words: {
        "Hoa qu·∫£": ["Cam", "Chanh", "T√°o", "D∆∞a h·∫•u", "Xo√†i", "Chu·ªëi", "L√™", "Nho", "M·∫≠n", "·ªîi", "D·ª©a", "B∆∞·ªüi", "Na", "M√≠t", "D·ª´a", "Qu√Ωt", "L·ª±u", "Kiwi", "Ch√¥m ch√¥m", "Thanh long"],
        "ƒê·ªông v·∫≠t": ["Ch√≥", "M√®o", "H·ªï", "Voi", "Kh·ªâ", "Ng·ª±a", "Tr√¢u", "B√≤", "C√° heo", "C√° m·∫≠p", "S∆∞ t·ª≠", "G√†", "V·ªãt", "C·ª´u", "D√™", "G·∫•u", "Th·ªè", "Chim", "R√πa", "·∫æch"],
        "ƒê·ªì v·∫≠t": ["Gh·∫ø", "ƒêi·ªán tho·∫°i", "K√≠nh", "B√†n", "C·ªëc", "B√∫t", "Qu·∫°t", "Tivi", "Laptop", "T·ªß l·∫°nh", "Xe ƒë·∫°p", "√î t√¥", "Xe m√°y", "ƒê√®n", "Ch·∫£o", "N·ªìi", "Ly", "Dao", "K√©o", "G·ªëi"],
        "M√†u s·∫Øc": ["ƒê·ªè", "Xanh", "V√†ng", "Cam", "T√≠m", "H·ªìng", "ƒêen", "Tr·∫Øng", "N√¢u", "Xanh l√°", "Xanh d∆∞∆°ng", "X√°m", "B·∫°c", "Xanh ng·ªçc"],
        "Qu·ªëc gia": ["Vi·ªát Nam", "Trung Qu·ªëc", "Nh·∫≠t B·∫£n", "H√†n Qu·ªëc", "Th√°i Lan", "M·ªπ", "Anh", "Ph√°p", "ƒê·ª©c", "Nga", "Canada", "Brazil", "√öc", "·∫§n ƒê·ªô", "Ai C·∫≠p", "Mexico", "T√¢y Ban Nha", "√ù"],
        "M√≥n ƒÉn": ["Ph·ªü", "B√∫n ch·∫£", "Nem r√°n", "B√°nh m√¨", "B√°nh cu·ªën", "C∆°m t·∫•m", "B√∫n b√≤ Hu·∫ø", "H·ªß ti·∫øu", "Ch√°o", "X√¥i", "G·ªèi cu·ªën", "B√°nh x√®o", "B√°nh bao", "L·∫©u", "C∆°m rang", "Th·ªãt kho", "Canh chua", "G√† r√°n", "Pizza", "Hamburger"],
        "ƒê·ªì u·ªëng": ["N∆∞·ªõc l·ªçc", "Tr√† ƒë√°", "C√† ph√™", "Tr√† s·ªØa", "Sinh t·ªë", "N∆∞·ªõc cam", "N∆∞·ªõc chanh", "Coca", "Pepsi", "Bia", "R∆∞·ª£u vang", "R∆∞·ª£u tr·∫Øng", "S·ªØa", "S·ªØa chua", "N∆∞·ªõc √©p t√°o", "N∆∞·ªõc √©p d·ª©a", "N∆∞·ªõc √©p ·ªïi", "Matcha", "Capuchino", "Latte"],
        "Ngh·ªÅ nghi·ªáp": ["B√°c sƒ©", "K·ªπ s∆∞", "Gi√°o vi√™n", "C√¥ng an", "B·ªô ƒë·ªôi", "N√¥ng d√¢n", "L·∫≠p tr√¨nh vi√™n", "Thi·∫øt k·∫ø", "Nh·∫°c sƒ©", "Ca sƒ©", "Di·ªÖn vi√™n", "Lu·∫≠t s∆∞", "K·∫ø to√°n", "ƒê·∫ßu b·∫øp", "Phi c√¥ng", "Ti·∫øp vi√™n", "B√°n h√†ng", "T√†i x·∫ø", "Y t√°", "Ph√≥ng vi√™n"],
        "Th·ªÉ thao": ["B√≥ng ƒë√°", "B√≥ng r·ªï", "C·∫ßu l√¥ng", "B√≥ng chuy·ªÅn", "B∆°i l·ªôi", "ƒêi·ªÅn kinh", "Qu·∫ßn v·ª£t", "B√≥ng b√†n", "Boxing", "Karate", "Judo", "Taekwondo", "Golf", "B·∫Øn cung", "Tr∆∞·ª£t bƒÉng", "Tr∆∞·ª£t v√°n", "ƒêua xe", "Nh·∫£y cao", "Nh·∫£y xa", "C·ª≠ t·∫°"],
        "Ph∆∞∆°ng ti·ªán": ["Xe m√°y", "√î t√¥", "Xe ƒë·∫°p", "M√°y bay", "T√†u h·ªèa", "T√†u th·ªßy", "Xe bu√Ωt", "Xe t·∫£i", "Xe ƒëi·ªán", "Xe kh√°ch", "Xe ng·ª±a", "Xe ba g√°c", "Xe c√¥ng n√¥ng", "Xe lu", "Xe c·∫©u", "Xe tƒÉng", "Xe c·ª©u h·ªèa", "Xe c·ª©u th∆∞∆°ng", "Xe c·∫£nh s√°t", "Xe container"],
        "√Çm nh·∫°c": ["Piano", "Guitar", "Tr·ªëng", "S√°o", "Violin", "ƒê√†n tranh", "ƒê√†n b·∫ßu", "K√®n", "Ukulele", "Harmonica", "Rap", "Rock", "Pop", "Jazz", "Opera", "EDM", "Bolero", "C·∫£i l∆∞∆°ng", "D√¢n ca", "Hiphop"],
        "ƒê·ªãa ƒëi·ªÉm": ["Tr∆∞·ªùng h·ªçc", "B·ªánh vi·ªán", "Si√™u th·ªã", "Ch·ª£", "C√¥ng vi√™n", "Nh√† h√°t", "R·∫°p chi·∫øu phim", "B·∫£o t√†ng", "Nh√† th·ªù", "Ch√πa", "S√¢n v·∫≠n ƒë·ªông", "B√£i bi·ªÉn", "N√∫i", "S√¥ng", "H·ªì", "Th∆∞ vi·ªán", "Kh√°ch s·∫°n", "Nh√† h√†ng", "Qu√°n c√† ph√™", "S√¢n bay"],
        "Tr√≤ ch∆°i": ["C·ªù vua", "C·ªù t∆∞·ªõng", "C·ªù caro", "C·ªù t·ª∑ ph√∫", "UNO", "Poker", "B√†i ti·∫øn l√™n", "M·∫°t ch∆∞·ª£c", "Sudoku", "Rubik", "Caro", "ƒê·ªë vui", "Gh√©p h√¨nh", "Tr·ªën t√¨m", "B·∫Øn bi", "Nh·∫£y d√¢y", "O·∫≥n t√π t√¨", "ƒêi·ªán t·ª≠"],
        "C√¥ng ngh·ªá": ["ƒêi·ªán tho·∫°i", "Laptop", "M√°y t√≠nh", "Tivi", "M√°y in", "M√°y ·∫£nh", "Camera", "ƒê·ªìng h·ªì th√¥ng minh", "Loa", "Tai nghe", "USB", "·ªî c·ª©ng", "Chu·ªôt", "B√†n ph√≠m", "Tablet", "Drone", "M√°y chi·∫øu", "Robot", "K√≠nh VR", "M√°y ch∆°i game"],
        "Th·ªùi ti·∫øt": ["M∆∞a", "N·∫Øng", "Gi√≥", "B√£o", "S·∫•m s√©t", "M∆∞a ph√πn", "M∆∞a ƒë√°", "N·∫Øng g·∫Øt", "L·∫°nh", "N√≥ng", "√Çm u", "M√°t m·∫ª", "S∆∞∆°ng m√π", "M∆∞a r√†o", "M∆∞a to", "L≈©", "L·ªëc xo√°y", "M∆∞a ng√¢u", "Nhi·ªát ƒë·ªõi", "√în ƒë·ªõi"]
    },
    assignments: {},
    currentIndex: 0,
    suspectIndex: -1
};

// H√†m ti·ªán √≠ch ƒë·ªÉ chuy·ªÉn ƒë·ªïi m√†n h√¨nh
function switchScreen(screenId) {
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
    document.getElementById(screenId).classList.add('active');
}

// X·ª≠ l√Ω t·∫°o √¥ nh·∫≠p t√™n
function createNameInputs() {
    const count = parseInt(document.getElementById("playerCount").value);
    const container = document.getElementById("nameInputs");
    container.innerHTML = "";
    if (isNaN(count) || count < 3 || count > 8) {
        document.getElementById("error-message").textContent = "S·ªë ng∆∞·ªùi ch∆°i ph·∫£i t·ª´ 3 ƒë·∫øn 8!";
        return;
    }
    document.getElementById("error-message").textContent = "";
    for (let i = 0; i < count; i++) {
        container.innerHTML += `<input type="text" class="playerNameInput" placeholder="T√™n ng∆∞·ªùi ch∆°i ${i + 1}">`;
    }
}

// B·∫Øt ƒë·∫ßu tr√≤ ch∆°i
function startGame() {
    const playerNameInputs = document.querySelectorAll("#nameInputs .playerNameInput");
    
    // S·ª≠a l·ªói: G√°n t√™n cho m·ªói ng∆∞·ªùi ch∆°i, n·∫øu tr·ªëng th√¨ ƒë·∫∑t t√™n m·∫∑c ƒë·ªãnh
    gameState.players = Array.from(playerNameInputs).map((input, index) => input.value.trim() || `Ng∆∞·ªùi ${index + 1}`);
    
    const checkedTopics = Array.from(document.querySelectorAll("#topics input:checked")).map(cb => cb.value);
    if (checkedTopics.length === 0) {
        document.getElementById("error-message").textContent = "Vui l√≤ng ch·ªçn √≠t nh·∫•t 1 ch·ªß ƒë·ªÅ!";
        return;
    }
    document.getElementById("error-message").textContent = "";

    const topic = checkedTopics[Math.floor(Math.random() * checkedTopics.length)];
    const wordList = gameState.words[topic];
    const keyword = wordList[Math.floor(Math.random() * wordList.length)];
    gameState.suspectIndex = Math.floor(Math.random() * gameState.players.length);

    gameState.assignments = {};
    gameState.players.forEach((p, i) => {
        if (i === gameState.suspectIndex) {
            gameState.assignments[p] = { role: "K·∫ª Kh·∫£ Nghi üëΩ", content: `G·ª£i √Ω: ${topic}` };
        } else {
            gameState.assignments[p] = { role: "B√¨nh Th∆∞·ªùng", content: `T·ª´ kh√≥a: ${keyword}` };
        }
    });

    gameState.currentIndex = 0;
    switchScreen('card-screen');
    showCurrentCard();
}

// Hi·ªÉn th·ªã th·∫ª b√†i cho ng∆∞·ªùi ch∆°i hi·ªán t·∫°i
function showCurrentCard() {
    const name = gameState.players[gameState.currentIndex];
    const assignment = gameState.assignments[name];

    document.getElementById("player-turn").innerText = `Ng∆∞·ªùi ch∆°i ${gameState.currentIndex + 1}: ${name}`;
    document.getElementById("card-front-name").innerText = name;
    document.getElementById("card-role").innerText = assignment.role;
    document.getElementById("card-content").innerText = assignment.content;

    document.querySelector("#card-container .card-inner").classList.remove('flipped');
    document.getElementById("nextBtn").classList.add('hidden');
}

// Chuy·ªÉn sang ng∆∞·ªùi ch∆°i ti·∫øp theo
function nextPlayer() {
    gameState.currentIndex++;
    if (gameState.currentIndex >= gameState.players.length) {
        switchScreen('vote-screen');
        showVoteScreen();
    } else {
        showCurrentCard();
    }
}

// Hi·ªÉn th·ªã m√†n h√¨nh b·ªè phi·∫øu
function showVoteScreen() {
    const playerOptionsContainer = document.getElementById("player-options");
    playerOptionsContainer.innerHTML = '';
    
    gameState.players.forEach(p => {
        const playerDiv = document.createElement("div");
        playerDiv.className = "player-option-item";
        playerDiv.innerHTML = `<input type="radio" name="suspect" value="${p}" id="radio-${p}">
                               <label for="radio-${p}">${p}</label>`;
        playerOptionsContainer.appendChild(playerDiv);
    });
}

// G·ª≠i phi·∫øu b·∫ßu
function submitVote() {
    const selectedPlayer = document.querySelector('input[name="suspect"]:checked');
    if (!selectedPlayer) {
        alert("Vui l√≤ng ch·ªçn m·ªôt ng∆∞·ªùi ƒë·ªÉ b·ªè phi·∫øu.");
        return;
    }
    checkResult(selectedPlayer.value);
}

// Ki·ªÉm tra k·∫øt qu·∫£
function checkResult(suspectVote) {
    const suspectName = gameState.players[gameState.suspectIndex];
    const resultMessage = document.getElementById("result-message");

    if (suspectVote === suspectName) {
        resultMessage.textContent = "K·∫ª t√¨nh nghi ƒë√£ b·ªã b·∫Øt! üéâ";
        resultMessage.style.color = "var(--success-color)";
    } else {
        resultMessage.textContent = "K·∫ª t√¨nh nghi v·∫´n ·ªü quanh ch√∫ng ta... üïµÔ∏è";
        resultMessage.style.color = "var(--error-color)";
    }
    switchScreen('result-screen');
}

// Ch∆°i l·∫°i
function resetGame() {
    document.getElementById("nameInputs").innerHTML = '';
    document.getElementById("playerCount").value = '';
    document.querySelectorAll("#topics input:checked").forEach(cb => cb.checked = false);
    
    gameState.players = [];
    gameState.currentIndex = 0;
    gameState.assignments = {};
    gameState.suspectIndex = -1;
    
    switchScreen('setup-screen');
}

// H√†m kh·ªüi t·∫°o v√† g√°n s·ª± ki·ªán ban ƒë·∫ßu
function init() {
    // G√°n s·ª± ki·ªán cho c√°c n√∫t
    document.getElementById('createNameBtn').addEventListener('click', createNameInputs);
    document.getElementById('startGameBtn').addEventListener('click', startGame);
    document.getElementById('nextBtn').addEventListener('click', nextPlayer);
    document.getElementById('submitVoteBtn').addEventListener('click', submitVote);
    document.getElementById('resetGameBtn').addEventListener('click', resetGame);

    // G√°n s·ª± ki·ªán l·∫≠t th·∫ª b√†i m·ªôt l·∫ßn duy nh·∫•t
    const cardInner = document.querySelector("#card-container .card-inner");
    cardInner.addEventListener('mousedown', () => cardInner.classList.add('flipped'));
    cardInner.addEventListener('touchstart', () => cardInner.classList.add('flipped'));
    
    cardInner.addEventListener('mouseup', () => {
        cardInner.classList.remove('flipped');
        document.getElementById("nextBtn").classList.remove('hidden');
    });
    cardInner.addEventListener('touchend', () => {
        cardInner.classList.remove('flipped');
        document.getElementById("nextBtn").classList.remove('hidden');
    });
}

// Ch·∫°y h√†m kh·ªüi t·∫°o khi DOM ƒë√£ ƒë∆∞·ª£c t·∫£i
document.addEventListener('DOMContentLoaded', init);